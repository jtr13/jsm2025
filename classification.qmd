---
title: "ggplot2 extensions"
execute:
  echo: true
  cache: true
  message: false
  warning: false
format: 
  revealjs:
    width: 1152
    height: 648
    highlight-style: joyce.theme
    theme: [simple, custom3.scss]
    scrollable: true
    chalkboard: true
    slide-number: true
    code-fold: true

knitr:
  opts_chunk: 
    fig.width: 6
    fig.height: 4
    fig.align: center
    out.width: 100%
    
language:
  code-summary: ""
---  

# Introduction to ggplot2 and Grammar of Graphics

# Classifying by construct:

GGPLOT2 GRAMMAR

## New Geoms

`ggforce` -- arcs, bezier curves, splines, voronai, hulls, delaunay, and others

`ggalt` -- splines, encircling points, dumbbell and lollipop charts, and others

`ggsignif` -- significance brackets with p values

## `ggforce`

```{r}
#| fig-width: 12
#| fig-height: 4
library(ggforce)
library(patchwork)
df <- data.frame(r = 1:48, 
                 start = runif(48, 0, 2*pi), 
                 end = runif(48, 0, 2*pi))

p1 <- ggplot(df, aes(x0 = 0, y0 = 0, r = r, 
               start = start, end = end,
               color = r)) + 
  geom_arc() + 
#  coord_fixed() + 
  scale_color_viridis_c() +
  labs(title = "geom_arc()") +
  theme_bw() +
  theme(legend.position = "none",
        title = element_text(family = "courier", face = "bold"))

control_points <- data.frame(
  x = c(0, 2, 3, 5, 1, 1.25, 1.25, 3.75, 3.5, 4.25, 4.5),
  y = c(4, 5, 3, 4.25, 1, 1.5, 4.25, 3.75, 2, 0, 1.5),
  group = c(1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3)
)

p2 <- ggplot(control_points, aes(x = x, y = y, group = group, color = factor(group))) +
  geom_bezier(linewidth = 2, alpha = .75) +
  geom_point() +
#  coord_fixed() +
  scale_x_continuous(name = NULL) +
  scale_y_continuous(name = NULL, breaks = 0:5) +
  labs(title = "geom_bezier()") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

p3 <- ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + 
  geom_point() + 
  geom_mark_ellipse(aes(label = Species), label.fontsize = 8) +
  scale_x_continuous(expand = c(.2, .2)) +
  scale_y_continuous(expand = c(.2, .2)) +
  labs(title = "geom_mark_ellipse()", x = NULL, y = NULL) +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        plot.title = element_text(family = "courier", face = "bold"))

p1 + p2 + p3
```

## `ggalt`

```{r}
#| fig-width: 12
#| fig-height: 4
library(ggplot2)
library(ggalt)

dat <- data.frame(x=c(1:10, 1:10, 1:10),
                  y=c(sample(15:30, 10), 2*sample(15:30, 10), 3*sample(15:30, 10)),
                  group=factor(c(rep(1, 10), rep(2, 10), rep(3, 10)))
)


p1 <- ggplot(dat, aes(x, y, group=group, color=factor(group))) +
    geom_point(color="black") +
    geom_smooth(se=FALSE, linetype="dashed", size=0.5) +
    geom_xspline(spline_shape=-0.4, size=0.5) +
    labs(title = "geom_xspline()") +
    theme_bw() +
    theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

d <- data.frame(x=c(1,1,2),y=c(1,2,2)*100)

p2 <- ggplot(d,aes(x,y))
p2 <- p2 + scale_x_continuous(expand=c(0.5,1))
p2 <- p2 + scale_y_continuous(expand=c(0.5,1))

p2 <- p2 + geom_encircle(s_shape=0.5, expand=0.1, colour="red") + geom_point() +
  labs(title = "geom_encircle()") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

df <- data.frame(trt=LETTERS[1:5], l=c(20, 40, 10, 30, 50), r=c(70, 50, 30, 60, 80))

p3 <- ggplot(df, aes(y=trt, x=l, xend=r)) + 
  geom_dumbbell(size=3, color="#e3e2e1", 
                colour_x = "#5b8124", colour_xend = "#bad744",
                dot_guide=TRUE, dot_guide_size=0.25) +
  labs(x=NULL, y=NULL, title="geom_dumbbell()") +
  theme(panel.grid.major.x=element_line(size=0.05)) +
  theme(panel.grid.major.y=element_blank()) +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

p1 + p2 + p3
```

:::{.pt5}
Code source: [https://github.com/hrbrmstr/ggalt](https://github.com/hrbrmstr/ggalt)
:::

## `ggsignif`

```{r}
#| fig-width: 12
#| fig-height: 4
library(ggplot2)
library(ggsignif)

p1 <- ggplot(mpg, aes(class, hwy)) +
  geom_boxplot() +
  geom_signif(
    comparisons = list(c("compact", "midsize"), c("minivan", "suv")),
    map_signif_level = TRUE, textsize = 6
  ) +
  ylim(NA, 48) +
  labs(title = "geom_signif()") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

p2 <- ggplot(diamonds, aes(x = cut, y = carat)) +
  geom_boxplot(aes(fill = color)) +
  geom_signif(comparisons = list(
    c("Fair", "Good"),
    c("Very Good", "Ideal")
  ), textsize = 3) +
  facet_wrap(~color) +
  ylim(NA, 6.3) +
  labs(title = "compatible with facets") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"),
        strip.text = element_text(size = 6, margin = margin(1, 1, 1, 1)),
        strip.background = element_rect(size = 0.2)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

p1 + p2
```

:::{.pt5}
Code source: [https://github.com/const-ae/ggsignif](https://github.com/const-ae/ggsignif)
:::

## New Geoms for Labels/Text

`ggrepel` -- repel overlapping text labels

`ggfittext` -- fit text into boxes

`geomtextpath` -- curved text

## `ggrepel`

```{r}
#| fig-width: 12
#| fig-height: 4
library(ggrepel)
p1 <- ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars))) +
  geom_text() +
  geom_point(color = 'red') +
  theme_classic(base_size = 16)  +
  labs(title = "geom_text()") +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

p2 <- ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars))) +
  geom_text_repel() +
  geom_point(color = 'red') +
  theme_classic(base_size = 16)  +
  labs(title = "geom_text_repel()") +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

p1 + p2
```
:::{.pt5}
Code source: [https://ggrepel.slowkow.com/](https://ggrepel.slowkow.com/)
:::

## `ggfittext`

```{r}
#| fig-width: 12
#| fig-height: 4
library(ggfittext)

p1 <- ggplot(animals, aes(x = type, y = flies, label = animal)) +
  geom_tile(fill = "white", colour = "black") +
  geom_text()  +
  labs(title = "geom_text()") +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

p2 <- ggplot(animals, aes(x = type, y = flies, label = animal)) +
  geom_tile(fill = "white", colour = "black") +
  geom_fit_text()  +
  labs(title = "geom_fit_text()") +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

p3 <- ggplot(gold, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, 
                      fill = linenumber, label = line)) +
  coord_polar() +
  geom_rect() +
  scale_fill_gradient(low = "#fee391", high = "#238443") +
  geom_fit_text(min.size = 0, grow = TRUE, flip = TRUE) +
  labs(title = "coord_polar(), geom_fit_text()") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

p1 + p2 + p3
```
:::{.pt5}
Code source: [https://github.com/wilkox/ggfittext](https://github.com/wilkox/ggfittext)
:::

## `geomtextpath`

```{r}
#| fig-width: 12
#| fig-height: 4
library(geomtextpath)

t <- seq(5, -1, length.out = 1000) * pi

spiral <- data.frame(x = sin(t) * 1:1000, 
                     y = cos(t) * 1:1000,
                     text = paste("Like a circle in a spiral,",
                                  "like a wheel within a wheel,",
                                  "never ending or beginning,",
                                  "on an ever spinning reel")
                     )

p1 <- ggplot(spiral, aes(x, y, label = text)) +
  geom_textpath(size = 4, vjust = 2, text_only = TRUE) +
  coord_equal(xlim = c(-1500, 1500), ylim = c(-1500, 1500)) +
    labs(title = "geom_textpath()") +
    theme_bw() +
    theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

df <- data.frame(x = spline(1:5, runif(5), xout = seq(1, 5, 1/100))$y,
                 y = spline(1:5, runif(5), xout = seq(1, 5, 1/100))$y,
                 z = "A curved textbox on an arbitrary path")

p2 <- ggplot(df, aes(x, y, label = z)) + geom_labelpath(size = 4, fill = "#F6F6FF") +
    labs(title = "geom_labelpath()") +
    theme_bw() +
    theme(legend.position = "none",
      panel.grid.minor = element_blank(),
      title = element_text(family = "courier", face = "bold"))

p3 <- ggplot(iris, aes(x = Sepal.Length, colour = Species, label = Species)) +
  geom_textdensity(size = 6, fontface = 2, hjust = 0.2, vjust = 0.3) +
  theme(legend.position = "none") +
  labs(title = "geom_textdensity()") +
  theme_bw() +
  theme(legend.position = "none",
      panel.grid.minor = element_blank(),
      title = element_text(family = "courier", face = "bold"))

p1 + p2 + p3
```

:::{.pt5}
Code source: [https://allancameron.github.io/geomtextpath/](https://allancameron.github.io/geomtextpath/)
:::

## New Stats

`ggstats` -- new stat functions for weighted mean and proportions

`ggridges` -- ridgeline plots (partially overlapping line plots)

`ggpmisc` -- displays model fit statistics and summaries

## `ggstats`

```{r}
#| fig-width: 12
#| fig-height: 4
library(ggstats)

data(tips, package = "reshape")

p1 <- ggplot(tips) +
  aes(x = day, y = total_bill, fill = sex, weight = size) +
  stat_weighted_mean(geom = "bar", position = "dodge") +
  ylab("Mean total bill weighted by party size") +
  labs(title = "stat_weighted_mean(geom = 'bar')") +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

p2 <- ggplot(as.data.frame(Titanic)) +
  aes(x = Class, fill = Survived, weight = Freq, by = Class) +
  geom_bar(position = "fill") +
  stat_prop(geom = "text", position = position_fill(.5)) +
  labs(title = "stat_prop(geom = 'text')") +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

p1 + p2
```
:::{.pt5}
Code source: [https://larmarange.github.io/ggstats/](https://larmarange.github.io/ggstats/)
:::

## `ggridges`

```{r}
#| fig-width: 12
#| fig-height: 4
library(ggridges)

p <- ggplot(diamonds, aes(x = price, y = cut)) +
  stat_density_ridges(geom = "density_ridges", scale = 4) + 
  scale_y_discrete(expand = c(0, 0)) +     # will generally have to set the `expand` option
  scale_x_continuous(expand = c(0, 0)) +   # for both axes to remove unneeded padding
  coord_cartesian(clip = "off") + # to avoid clipping of the very top of the top ridgeline
  labs(title = "stat_density_ridges(geom = 'density_ridges')") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))
  
p
```
:::{.pt5}
Code source: [https://github.com/wilkelab/ggridges](https://github.com/wilkelab/ggridges)
:::

## `ggpmisc`

```{r}
#| fig-width: 12
#| fig-height: 4
library(ggpmisc)
library(ggrepel)
library(broom)

p1 <- ggplot(mpg, aes(factor(cyl), cty)) +
  geom_boxplot(width = 0.33) +
  stat_multcomp(contrasts = "Dunnet",
                p.adjust.method = "holm",
                size = 2.75) +
  expand_limits(y = 0) +
  labs(title = "stat_multcomp()") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

formula <- y ~ x + I(x^2)
p2 <- ggplot(cars, aes(speed, dist)) +
  geom_point() +
  geom_smooth(method = "lm", formula = formula) +
  stat_fit_tb(method = "lm",
              method.args = list(formula = formula),
              tb.type = "fit.anova",
              tb.vars = c(Effect = "term", 
                          "df",
                          "M.S." = "meansq", 
                          "italic(F)" = "statistic", 
                          "italic(P)" = "p.value"),
              tb.params = c(x = 1, "x^2" = 2),
              label.y = "top", label.x = "left",
              size = 2.5,
              parse = TRUE) +
  labs(title = "stat_fit_tb()") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

p1 + p2
```
:::{.pt5}
Code source: [https://github.com/aphalo/ggpmisc](https://github.com/aphalo/ggpmisc)
:::

## New Facets

`geofacet` -- facet plot geographically while preserving some of the original geographical orientation 

`ggh4x` -- nested facets

`ggside` -- implemented as geoms but really adds facets

## `geofacet`

```{r}
#| fig-width: 12
#| fig-height: 6
library(geofacet)

p1 <- ggplot(state_unemp, aes(year, rate)) +
  geom_line() +
  facet_geo(~ state, grid = "us_state_grid2") +
  scale_x_continuous(labels = function(x) paste0("'", substr(x, 3, 4))) +
  ylab("Unemployment Rate (%)") +
  labs(title = "facet_geo(grid = 'us_state_grid2')") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"),
        strip.text = element_text(size = 6, margin = margin(1, 1, 1, 1)),
        strip.background = element_rect(size = 0.2))

p1
```
:::{.pt5}
Code source: [https://github.com/hafen/geofacet/](https://github.com/hafen/geofacet/)
:::

## `ggh4x`

```{r}
#| fig-width: 12
#| fig-height: 4
library(ggh4x)

new_iris <- transform(
  iris, 
  Nester = ifelse(Species == "setosa", "Short Leaves", "Long Leaves")
)

p1 <- ggplot(new_iris, aes(Sepal.Width, Sepal.Length)) +
  geom_point() +
  facet_nested(~ Nester + Species) +
  labs(title = "facet_nested()") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"),
        strip.text = element_text(size = 6, margin = margin(1, 1, 1, 1)),
        strip.background = element_rect(size = 0.2))

p2 <- ggplot(mpg, aes(displ, hwy, colour = as.factor(cyl))) + geom_point() +
  labs(x = "Engine displacement", y = "Highway miles per gallon") +
  facet_nested_wrap(
    vars(cyl, drv), dir = "v", strip.position = "left",
    axes = "all", remove_labels = "x"
  ) +
  theme(strip.placement = "outside") +
  labs(title = "facet_nested_wrap()") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"),
        strip.text = element_text(size = 6, margin = margin(1, 1, 1, 1)),
        strip.background = element_rect(size = 0.2))

p1 + p2
```
:::{.pt5}
Code source: [https://teunbrand.github.io/ggh4x/articles/Facets.html](https://teunbrand.github.io/ggh4x/articles/Facets.html)
:::

## `ggside`

```{r}
#| fig-width: 12
#| fig-height: 6
library(ggside)

p1 <- ggplot(mpg, aes(displ, hwy, colour = class)) + 
  geom_point(size = 2) +
  geom_xsideboxplot(aes(y =class), orientation = "y") +
  geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
  scale_ysidex_continuous(guide = guide_axis(angle = 90), minor_breaks = NULL) +
  labs(title = "geom_xsideboxplot(), geom_ysidedensity()") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold")) +
  theme(ggside.panel.scale = .5)

p1
```
:::{.pt5}
Code source: [https://github.com/jtlandis/ggside](https://github.com/jtlandis/ggside)
:::

## New Scales

`ggsci` -- color palettes inspired by colors used in scientific journals, data visualization libraries, science fiction movies, and TV shows

`ggnewscale` -- use multiple fill/color scales in one plot

`ggbreak` -- set breakpoints for truncating the plot

## `ggsci`

```{r}
#| fig-width: 12
#| fig-height: 4
library(ggsci)

data("diamonds")

p1 <- ggplot(
  subset(diamonds, carat >= 2.2),
  aes(x = table, y = price, colour = cut)
) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "loess", alpha = 0.05, linewidth = 1, span = 1)

p1_npg <- p1 + scale_color_npg() +
  labs(title = "scale_color_npg()") +
  theme_bw() +
  theme(legend.position = "none",
      panel.grid.minor = element_blank(),
      title = element_text(family = "courier", face = "bold"))

p1_uchicago <- p1 + scale_color_uchicago() +
  labs(title = "scale_color_uchicago()") +
  theme_bw() +
  theme(legend.position = "none",
      panel.grid.minor = element_blank(),
      title = element_text(family = "courier", face = "bold"))

data("mtcars")
cor <- cor(unname(mtcars))
cor_melt <- data.frame(
  Var1 = rep(seq_len(nrow(cor)), times = ncol(cor)),
  Var2 = rep(seq_len(ncol(cor)), each = nrow(cor)),
  value = as.vector(cor)
)

p3 <- ggplot(cor_melt, aes(x = Var1, y = Var2, fill = value)) +
  geom_tile(colour = "black", linewidth = 0.3) +
  theme_void() +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )

p3_gsea <- p3 + scale_fill_gsea() +
  labs(title = "scale_fill_gsea()") +
  theme_bw() +
  theme(legend.position = "none",
      panel.grid.minor = element_blank(),
      title = element_text(family = "courier", face = "bold"))

p1_npg + p1_uchicago + p3_gsea
```

:::{.pt5}
Code source: [https://nanx.me/ggsci/articles/ggsci.html](https://nanx.me/ggsci/articles/ggsci.html)
:::

## `ggnewscale`

```{r}
#| fig-width: 12
#| fig-height: 4

library(ggnewscale)
# Equivalent to melt(volcano)
topography <- expand.grid(x = 1:nrow(volcano),
                          y = 1:ncol(volcano))
topography$z <- c(volcano)

# point measurements of something at a few locations
set.seed(42)
measurements <- data.frame(x = runif(30, 1, 80),
                           y = runif(30, 1, 60),
                           rainfall = rnorm(30))

ggplot(mapping = aes(x, y)) +
  geom_contour(data = topography, aes(z = z, color = stat(level))) +
  # Color scale for topography
  scale_color_viridis_c(option = "A") +
  # geoms below will use another color scale
  new_scale_color() +
  geom_point(data = measurements, size = 3, aes(color = rainfall)) +
  # Color scale applied to geoms added after new_scale_color()
  scale_colour_continuous()
```

:::{.pt5}
Code source: [https://github.com/eliocamp/ggnewscale/](https://github.com/eliocamp/ggnewscale/)
:::

## `ggbreak`

```{r}
#| fig-width: 12
#| fig-height: 4
library(ggbreak)

d <- data.frame(x = 1:20,
                y = c(rnorm(5) + 2, rnorm(5) + 50, rnorm(5) + 4, rnorm(5) + 100)
)

p1 <- ggplot(d, aes(y, x)) + geom_col(orientation="y") +
  labs(title = "without scale breaks") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

p2 <- ggplot(d, aes(y, x)) + geom_col(orientation="y") +
  scale_x_break(c(8, 40)) + scale_x_break(c(55,90)) +
  labs(title = "scale_x_break()") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

p3 <- ggplot(economics, aes(x=date, y = unemploy, colour = uempmed)) +
  geom_line() +
  scale_wrap(n=4) +
  labs(title = "scale_wrap()") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

d <- data.frame(
  x = 1:20,
  y = c(rnorm(5) + 4, rnorm(5) + 20, rnorm(5) + 5, rnorm(5) + 22)
)

p1 + p2 + p3
```
:::{.pt5}
Code source: [https://cran.r-project.org/web/packages/ggbreak/vignettes/ggbreak.html](https://cran.r-project.org/web/packages/ggbreak/vignettes/ggbreak.html)
:::

## New Themes

`hrbrthemes` -- typography-centric themes and theme components for ggplot2

`tvthemes` -- various ggplot2 themes and color/fill palettes based on popular TV shows

## `hrbrthemes`

```{r}
#| fig-width: 12
#| fig-height: 4
library(hrbrthemes)

ggplot(mtcars, aes(mpg, wt)) +
  geom_point() +
  labs(x="Fuel efficiency (mpg)", y="Weight (tons)",
       title="ggplot2 scatterplot example using theme_ipsum()",
       subtitle="A plot that is only useful for demonstration purposes",
       caption="Brought to you by...") +
  theme_ipsum()
```
:::{.pt5}
Code source: [https://github.com/hrbrmstr/hrbrthemes](https://github.com/hrbrmstr/hrbrthemes)
:::

## `tvthemes`

```{r}
#| fig-width: 12
#| fig-height: 4
library(tvthemes)

bobspog_plot <- ggplot(mpg, aes(displ)) +
  geom_histogram(aes(fill = class), col = "black", size = 0.1) +
  scale_fill_spongeBob() +
  labs(title = "F is for Fire that burns down the whole town!",
       subtitle = "U is for Uranium... bombs! N is for No survivors when you're-",
       caption = "Plankton, those things aren't what fun is about!") +
  theme_spongeBob(title.font = "Some Time Later",
                  text.font = "Some Time Later",
                  title.size = 22,
                  subtitle.size = 16,
                  axis.title.size = 16,
                  axis.text.size = 14,
                  legend.title.size = 14)+
  labs(title = "theme_spongeBob()")

bobspog_plot
```
:::{.pt5}
Code source: [https://ryo-n7.github.io/tvthemes/articles/examples.html](https://ryo-n7.github.io/tvthemes/articles/examples.html)
:::

## Misc

`patchwork` -- easily combine separate ggplots into the same graphic

`gganimate` -- adds animation through new grammar classes

## `patchwork`

```{r}
#| fig-width: 12
#| fig-height: 4
library(patchwork)

p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp)) +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold")) +
  labs(title = "(p1 | p2 | p3) / p4")
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear)) +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))
p3 <- ggplot(mtcars) + geom_smooth(aes(disp, qsec)) +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))
p4 <- ggplot(mtcars) + geom_bar(aes(carb)) +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

(p1 | p2 | p3) / p4
```
:::{.pt5}
Code source: [https://patchwork.data-imaginist.com/](https://patchwork.data-imaginist.com/)
:::

## `gganimate`

```{r}
#| fig-width: 12
#| fig-height: 4
library(gganimate)
library(gapminder)

ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
  geom_point(alpha = 0.7, show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  scale_x_log10() +
  facet_wrap(~continent) +
  # Here comes the gganimate specific bits
  labs(title = 'transition_time() | Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
  transition_time(year) +
  ease_aes('linear') +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))
```
:::{.pt5}
Code source: [https://gganimate.com/](https://gganimate.com/)
:::

# Classifying by construct:
ALTERNATIVE INITALIZE PLOT FUNCTION

## Transforms Data

`waterfalls` -- waterfall plots

## `waterfalls`

```{r}
#| fig-width: 12
#| fig-height: 4
library(waterfalls)

dt <- data.frame(funding = c('Monthly Income', 'Shares Income' , 'Fixed Deposit Income', 'Rental Expenses', 'Grocery expense', 'Other expense'),
                 Amounts = c(100000, 20000, 15000, -30000, -15000, -10000)
)

p1 <- waterfall(dt) +
  labs(title = "waterfall()") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"),
        axis.text.x = element_text(angle = 45, hjust = 1))

p2 <- waterfall(dt) +
  geom_point() + 
  labs(title = "waterfall() + geom_point()") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"),
        axis.text.x = element_text(angle = 45, hjust = 1))

p1 + p2
```
:::{.pt5}
Code source: [https://rpubs.com/techanswers88/waterfall-chart-ggplot](https://rpubs.com/techanswers88/waterfall-chart-ggplot)
:::

## Full Specialized Plots (returns ggplot2 object)

`ggraph` -- network visualization

`ggdendro` -- dendrograms

`ggVennDiagram` -- venn diagram

## `ggraph`

```{r}
#| fig-width: 12
#| fig-height: 4
library(ggraph)
library(tidygraph)

graph <- as_tbl_graph(highschool) |> 
  mutate(Popularity = centrality_degree(mode = 'in'))

p1 <- ggraph(graph, layout = 'kk') + 
  geom_edge_fan(aes(alpha = after_stat(index)), show.legend = FALSE) + 
  geom_node_point(aes(size = Popularity)) + 
  facet_edges(~year) + 
  theme_graph(foreground = 'steelblue', fg_text_colour = 'white')  +
  labs(title = "ggraph()") +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

p1
```
:::{.pt5}
Code source: [https://ggraph.data-imaginist.com/](https://ggraph.data-imaginist.com/)
:::

## `ggdendro`

```{r}
#| fig-width: 12
#| fig-height: 4
library(ggdendro)

hc <- hclust(dist(USArrests), "ave")
p1 <- ggdendrogram(hc, rotate = FALSE, size = 2) +
  labs(title = "ggdendro()") +
  theme(panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))
p1
```
:::{.pt5}
Code source: [https://cran.r-project.org/web/packages/ggdendro/vignettes/ggdendro.html](https://cran.r-project.org/web/packages/ggdendro/vignettes/ggdendro.html)
:::

## `ggVennDiagram`

```{r}
#| fig-width: 12
#| fig-height: 4
library(ggVennDiagram)
genes <- paste("gene",1:1000,sep="")
set.seed(20231214)
x <- list(A=sample(genes,300),
          B=sample(genes,525),
          C=sample(genes,440),
          D=sample(genes,350))

p1 <- ggVennDiagram(x) + 
  scale_fill_gradient(low="grey90",high = "red") +
  labs(title = "ggVennDiagram()") +
  theme(panel.grid.minor = element_blank(),
        title = element_text(family = "courier", face = "bold"))

p1
```
:::{.pt5}
Code source: [https://github.com/gaospecial/ggVennDiagram](https://github.com/gaospecial/ggVennDiagram)
:::

## Does Not Return ggplot2 Object

`survminer` -- provides functions for survival analysis and visualization

## `survminer`

::: columns
::: {.column width="65%"}
```{r}
#| fig-width: 12
#| fig-height: 7
library(survminer)
require("survival")

fit <- survfit(Surv(time, status) ~ sex, data = lung)

ggsurvplot(
  fit, 
  data = lung, 
  size = 1,                 # change line size
  palette = 
    c("#E7B800", "#2E9FDF"),# custom color palettes
  conf.int = TRUE,          # Add confidence interval
  pval = TRUE,              # Add p-value
  risk.table = TRUE,        # Add risk table
  risk.table.col = "strata",# Risk table color by groups
  legend.labs = 
    c("Male", "Female"),    # Change legend labels
  risk.table.height = 0.25, # Useful to change when you have multiple groups
  ggtheme = theme_bw()      # Change ggplot2 theme
)
```
:::
::: {.column width="35%"}
![error - not ggplot2 object](images/survminer_error.jpg)
:::
:::
:::{.pt5}
Code source: [https://github.com/kassambara/survminer](https://github.com/kassambara/survminer)
:::

## New Components

`gggenomes` -- package for comparative genomics that adds dedicated plot functions for genes

## `gggenomes`

```{r}
library(gggenomes)
# to inspect the example data shipped with gggenomes
data(package="gggenomes")

gfull <- gggenomes(
  genes = emale_genes, seqs = emale_seqs, links = emale_ava,
  feats = list(emale_tirs, ngaros=emale_ngaros, gc=emale_gc)) |> 
  add_sublinks(emale_prot_ava) |>
  sync() + # synchronize genome directions based on links
  geom_feat(position="identity", size=6) +
  geom_seq() +
  geom_link(data=links(2)) +
  geom_bin_label() +
  geom_gene(aes(fill=name)) +
  geom_gene_tag(aes(label=name), nudge_y=0.1, check_overlap = TRUE) +
  geom_feat(data=feats(ngaros), alpha=.3, size=10, position="identity") +
  geom_feat_note(aes(label="Ngaro-transposon"), data=feats(ngaros),
      nudge_y=.1, vjust=0) +
  geom_wiggle(aes(z=score, linetype="GC-content"), feats(gc),
      fill="lavenderblush4", position=position_nudge(y=-.2), height = .2) +
  scale_fill_brewer("Genes", palette="Dark2", na.value="cornsilk3")

gfull
```

:::{.pt5}
Code source: [https://thackl.github.io/gggenomes/](https://thackl.github.io/gggenomes/)
:::

## Modular components

```{r}
#| layout-ncol: 2
g <- gggenomes(
  genes = emale_genes, seqs = emale_seqs, links = emale_ava,
  feats = list(emale_tirs, ngaros=emale_ngaros, gc=emale_gc)) |> 
  add_sublinks(emale_prot_ava) |>
  sync() + # synchronize genome directions based on links
  geom_seq(color = NA) +
  geom_bin_label(color = NA) +
  scale_fill_brewer("Genes", palette="Dark2", na.value="cornsilk3") + 
  theme(legend.position = "none",
        title = element_text(size = 8, family = "courier", face = "bold"))
g1 <- g + geom_feat(position="identity", size=6) +
  labs(title = "geom_feat()")
g2 <- g + geom_seq() + labs(title = "geom_seq()")
g3 <- g + geom_link(data=links(2)) + labs(title = "geom_link()")
g4 <- g + geom_bin_label(size = 2) + labs(title = "geom_bin_label()")
g5 <- g + geom_gene(aes(fill=name)) + labs(title = "geom_gene()")
g6 <- g + geom_gene_tag(aes(label=name), nudge_y=0.1, check_overlap = TRUE) + labs(title = "geom_gene_tag()")
g7 <- g + geom_feat(data=feats(ngaros), alpha=.3, size=10, position="identity") + labs(title = "geom_feat()")
g8 <- g + geom_feat_note(aes(label="Ngaro-transposon"), data=feats(ngaros), nudge_y=.1, vjust=0) +
   labs(title = "geom_feat_note()")
g9 <- g + geom_wiggle(aes(z=score, linetype="GC-content"), feats(gc), fill="lavenderblush4", position=position_nudge(y=-.2), height = .2) + labs(title = "geom_wiggle()")
gfull
g1 + g2 + g3 + g4 + g5 + g6 + g7 + g8 + g9
```

## Modular components

```{r}
g1 + g2 + g3 + g4 + g5 + g6 + g7 + g8 + g9
```
